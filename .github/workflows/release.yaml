name: Release

on:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | awk '{print $2}')
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check_version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "")
          if [[ $latest_tag == "v${{ steps.extract_version.outputs.version }}" ]]; then
            echo "Version did not change, skipping build."
            exit 1
          fi

  build-windows:
    needs: check-version
    runs-on: windows-latest
    if: ${{ success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release
        run: flutter build windows --release

      - name: Archive build output
        run: |
          Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath abbi-v${{ needs.check-version.outputs.version }}-windows-x64.zip

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-release
          path: abbi-v${{ needs.check-version.outputs.version }}-windows-x64.zip

  create-tag-and-release:
    needs: [check-version, build-windows]
    runs-on: ubuntu-latest
    if: ${{ success() }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "aoisensi"
          git config --global user.email "me@aoisensi.info"

      - name: Download Windows ZIP artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-x64-release

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Create new tag
        run: |
          git tag "v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"

      - name: Create GitHub Release with GH CLI
        run: |
          gh release create v${{ needs.check-version.outputs.version }} abbi-v${{ needs.check-version.outputs.version }}-windows-x64.zip --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
